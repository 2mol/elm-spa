module Application.Route exposing
    ( Route
    , index
    , path
    , slug
    , folder
    )

{-|


# Routing

The [cli tool](https://github.com/ryannhg/elm-spa/tree/master/cli) is able to generate routes based on the folder
structure and files in the `src/Pages` folder.

If you're choosing to type out the routes manually, these are just
convenience functions for creating `Url.Parser` types for your application.

@docs Route

@docs index

@docs path

@docs slug

@docs folder

-}

import Url.Parser as Parser exposing ((</>), Parser)


{-| Literally just a Url.Parser under the hood.
-}
type alias Route route =
    Parser (route -> route) route


{-| A top level route.
Usually generated by an `Index.elm` file.

    Route.index Index

-}
index : (() -> route) -> Route route
index toRoute =
    Parser.map toRoute (Parser.top |> Parser.map ())


{-| A dynamic route, that passes the `String` value.
Usually generated by an `Slug.elm` file.

    Route.slug Slug

-}
slug : (String -> route) -> Route route
slug toRoute =
    Parser.map toRoute Parser.string


{-| A route for a path like. These are generated by other file names.

    Route.path "about-us" AboutUs

-}
path : String -> (() -> route) -> Route route
path p toRoute =
    Parser.map toRoute (Parser.s p |> Parser.map ())


{-| A route for nested routes, generated by a folder.

    Route.folder "settings" Settings Settings.routes

-}
folder :
    String
    -> (a -> route)
    -> List (Route a)
    -> Route route
folder p toRoute children =
    Parser.map toRoute
        (Parser.s p </> Parser.oneOf children |> Parser.map identity)
